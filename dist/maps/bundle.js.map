{"version":3,"sources":["bundle.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_require","toString","type","TAG","TYPE","tagged","typeName","fields","proto","tagged$toString","typeRep","_len","arguments","args","Array","_key","makeValue","typeRepToString","prototype","is","isType","constructor","taggedSum","constructors","cata","sum$cata","sum$toString","keys","forEach","tag","tagProto","create","defProp","sum$isUnit","_len2","_key2","sum$isVariant","sum$ctrToString","fs","this","TypeError","apply","arrToString","val","Boolean","values","idx","prop","desc","arr","str","sanctuary-type-classes","sanctuary-type-identifiers","2","_typeof","Symbol","iterator","mapping","equals","lte","concat","empty","map","contramap","ap","of","alt","zero","reduce","traverse","chain","chainRec","extend","extract","bimap","promap","self","FantasyLand","3","define","amd","sanctuaryTypeClasses","sanctuaryTypeIdentifiers","concat_","xs","ys","constant","x","y","has","k","hasOwnProperty","identity","pair","iterationNext","done","iterationDone","TypeClass","name","dependencies","test","every","d","_funcPath","allowInheritedProps","path","_x","funcPath","implPath","implementations","$","_name","requirements","getBoundMethod","Constructor","exec","isPrototype","m","bind","typeClass","arg","methods","Null$prototype$toString","Null$prototype$equals","other","Undefined$prototype$toString","Undefined$prototype$equals","Boolean$prototype$toString","valueOf","Boolean$prototype$equals","Number$prototype$toString","Infinity","Number$prototype$equals","isNaN","Date$prototype$toString","NaN","toISOString","Date$prototype$equals","RegExp$prototype$equals","source","global","ignoreCase","multiline","sticky","unicode","String$empty","String$prototype$toString","replace","String$prototype$equals","String$prototype$concat","Array$empty","Array$of","Array$chainRec","$todo","$done","shift","$more","push","unshift","Array$zero","Array$prototype$toString","reprs","sort","join","Array$prototype$equals","Array$prototype$concat","Array$prototype$map","Array$prototype$ap","result","idx2","Array$prototype$chain","Array$prototype$reduce","initial","acc","Array$prototype$traverse","go","lift2","Math","floor","Array$prototype$extend","Arguments$prototype$toString","Arguments$prototype$equals","Error$prototype$toString","message","Error$prototype$equals","Object$empty","Object$zero","Object$prototype$toString","Object$prototype$equals","Object$prototype$concat","Object$prototype$map","Object$prototype$reduce","Function$of","_","Function$chainRec","step","Function$prototype$equals","Function$prototype$map","functor","Function$prototype$promap","g","profunctor","Function$prototype$ap","Function$prototype$chain","Semigroup","Monoid","Functor","bifunctor","Bifunctor","Profunctor","applyF","applyX","Apply","lift3","z","apFirst","apSecond","Applicative","chain_","Chain","ChainRec","filter","pred","M","filterM","Alt","Plus","foldable","Foldable","traversable","Traversable","sequence","extend_","Extend","comonad","Comonad","Value","Setoid","Monad","Alternative","Array$prototype$alt","Object$prototype$alt","Null","fantasy-land/equals","Undefined","Number","Date","RegExp","String","fantasy-land/empty","fantasy-land/concat","fantasy-land/of","fantasy-land/chainRec","fantasy-land/zero","fantasy-land/map","fantasy-land/ap","fantasy-land/chain","fantasy-land/alt","fantasy-land/reduce","fantasy-land/traverse","fantasy-land/extend","Arguments","Function","fantasy-land/promap","method","$seen","pop","indexOf","xType","err","$pairs","some","p","4","$$type","slice","5","_require2","Validation","Failure","Success","_Success","_Failure","fold","errors","fail","_this","fn","otherErrors","_this2","isSuccess","daggy","fantasy-land"],"mappings":"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","file":"../bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar _require = require('sanctuary-type-classes'),\n    toString = _require.toString;\n\nvar type = require('sanctuary-type-identifiers');\n\n// Names of prop used to store:\n// * name of variant of a sum type\nvar TAG = '@@tag';\n// * array of arguments used to create a value (to speed up `cata`)\nvar VALUES = '@@values';\n// * `@@type` of it's returned results\nvar TYPE = '@@type';\n// * `@@type` of variant constructor's returned results\nvar RET_TYPE = '@@ret_type';\n\nvar tagged = function tagged(typeName, fields) {\n  var proto = {};\n  proto.toString = tagged$toString;\n  // this way we avoid named function\n  var typeRep = (0, function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return makeValue(fields, proto, args);\n  });\n  typeRep.toString = typeRepToString;\n  typeRep.prototype = proto;\n  typeRep.is = isType;\n  typeRep[TYPE] = typeName;\n  proto.constructor = typeRep;\n  return typeRep;\n};\n\nvar taggedSum = function taggedSum(typeName, constructors) {\n  var proto = {};\n  proto.cata = sum$cata;\n  proto.toString = sum$toString;\n  var typeRep = _defineProperty({\n    toString: typeRepToString,\n    prototype: proto,\n    is: isType\n  }, TYPE, typeName);\n  proto.constructor = typeRep;\n  Object.keys(constructors).forEach(function (tag) {\n    var fields = constructors[tag];\n    var tagProto = Object.create(proto);\n    defProp(tagProto, TAG, tag);\n    if (fields.length === 0) {\n      typeRep[tag] = makeValue(fields, tagProto, []);\n      typeRep[tag].is = sum$isUnit;\n      return;\n    }\n    typeRep[tag] = function () {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return makeValue(fields, tagProto, args);\n    };\n    typeRep[tag].is = sum$isVariant;\n    typeRep[tag][TAG] = tag;\n    typeRep[tag][RET_TYPE] = typeName;\n    typeRep[tag].toString = sum$ctrToString;\n  });\n  return typeRep;\n};\n\nvar sum$cata = function sum$cata(fs) {\n  var tag = this[TAG];\n  if (!fs[tag]) {\n    throw new TypeError(\"Constructors given to cata didn't include: \" + tag);\n  }\n  return fs[tag].apply(fs, this[VALUES]);\n};\n\nvar sum$ctrToString = function sum$ctrToString() {\n  return this[RET_TYPE] + '.' + this[TAG];\n};\n\nvar sum$toString = function sum$toString() {\n  return this.constructor[TYPE] + '.' + this[TAG] + arrToString(this[VALUES]);\n};\n\nvar typeRepToString = function typeRepToString() {\n  return this[TYPE];\n};\n\nvar tagged$toString = function tagged$toString() {\n  return '' + this.constructor[TYPE] + arrToString(this[VALUES]);\n};\n\nvar sum$isVariant = function sum$isVariant(val) {\n  return Boolean(val) && this[TAG] === val[TAG] && this[RET_TYPE] === type(val);\n};\n\nvar sum$isUnit = function sum$isUnit(val) {\n  return this === val || Boolean(val) && this[TAG] === val[TAG] && type(this) === type(val);\n};\n\nvar isType = function isType(val) {\n  return this[TYPE] === type(val);\n};\n\nvar makeValue = function makeValue(fields, proto, values) {\n  if (values.length !== fields.length) {\n    throw new TypeError('Expected ' + fields.length + ' arguments, got ' + values.length);\n  }\n  var obj = Object.create(proto);\n  defProp(obj, VALUES, values);\n  for (var idx = 0; idx < fields.length; idx++) {\n    obj[fields[idx]] = values[idx];\n  }\n  return obj;\n};\n\n// adopted version of withValue from  https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\nvar defProp = function defProp(obj, prop, val) {\n  var desc = defProp.desc || (defProp.desc = {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: null\n  });\n  desc.value = val;\n  Object.defineProperty(obj, prop, desc);\n};\n\n// optimised version of `arr.map(toString).join(', ')`\nvar arrToString = function arrToString(arr) {\n  if (arr.length === 0) {\n    return '';\n  }\n  var str = '(' + toString(arr[0]);\n  for (var i = 1; i < arr.length; i++) {\n    str = str + ', ' + toString(arr[i]);\n  }\n  return str + ')';\n};\n\nmodule.exports = {\n  taggedSum: taggedSum,\n  tagged: tagged\n};\n\n},{\"sanctuary-type-classes\":3,\"sanctuary-type-identifiers\":4}],2:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function () {\n\n  'use strict';\n\n  /* eslint comma-dangle: [\"off\"], no-var: [\"off\"], strict: [\"error\", \"function\"] */\n  /* global self */\n\n  var mapping = {\n    equals: 'fantasy-land/equals',\n    lte: 'fantasy-land/lte',\n    concat: 'fantasy-land/concat',\n    empty: 'fantasy-land/empty',\n    map: 'fantasy-land/map',\n    contramap: 'fantasy-land/contramap',\n    ap: 'fantasy-land/ap',\n    of: 'fantasy-land/of',\n    alt: 'fantasy-land/alt',\n    zero: 'fantasy-land/zero',\n    reduce: 'fantasy-land/reduce',\n    traverse: 'fantasy-land/traverse',\n    chain: 'fantasy-land/chain',\n    chainRec: 'fantasy-land/chainRec',\n    extend: 'fantasy-land/extend',\n    extract: 'fantasy-land/extract',\n    bimap: 'fantasy-land/bimap',\n    promap: 'fantasy-land/promap'\n  };\n\n  if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && _typeof(module.exports) === 'object') {\n    module.exports = mapping;\n  } else {\n    self.FantasyLand = mapping;\n  }\n})();\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n//. <pre>\n//:  Setoid   Semigroup   Foldable        Functor\n//: (equals)   (concat)   (reduce)         (map)\n//:               |           \\         / | | | | \\\n//:               |            \\       /  | | | |  \\\n//:               |             \\     /   | | | |   \\\n//:               |              \\   /    | | | |    \\\n//:               |               \\ /     | | | |     \\\n//:            Monoid         Traversable | | | |      \\\n//:            (empty)        (traverse)  / | | \\       \\\n//:                                      /  | |  \\       \\\n//:                                     /   / \\   \\       \\\n//:                             Profunctor /   \\ Bifunctor \\\n//:                              (promap) /     \\ (bimap)   \\\n//:                                      /       \\           \\\n//:                                     /         \\           \\\n//:                                   Alt        Apply      Extend\n//:                                  (alt)        (ap)     (extend)\n//:                                   /           / \\           \\\n//:                                  /           /   \\           \\\n//:                                 /           /     \\           \\\n//:                                /           /       \\           \\\n//:                               /           /         \\           \\\n//:                             Plus    Applicative    Chain      Comonad\n//:                            (zero)       (of)      (chain)    (extract)\n//:                               \\         / \\         / \\\n//:                                \\       /   \\       /   \\\n//:                                 \\     /     \\     /     \\\n//:                                  \\   /       \\   /       \\\n//:                                   \\ /         \\ /         \\\n//:                               Alternative    Monad     ChainRec\n//:                                                       (chainRec)\n//. </pre>\n//.\n//. ## API\n\n(function (f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n\n  if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && _typeof(module.exports) === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n})(function (type) {\n\n  'use strict';\n\n  //  concat_ :: Array a -> Array a -> Array a\n\n  function concat_(xs) {\n    return function (ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function (y) {\n      return x;\n    };\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) {\n    return x;\n  }\n\n  //  pair :: a -> b -> Pair a b\n  function pair(x) {\n    return function (y) {\n      return [x, y];\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) {\n    return { value: x, done: false };\n  }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) {\n    return { value: x, done: true };\n  }\n\n  //# TypeClass :: (String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass('my-package/Foo', [], hasMethod('foo'));\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass('my-package/Bar', [Foo], hasMethod('bar'));\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, dependencies, test);\n    }\n    this.name = name;\n    this.test = function (x) {\n      return dependencies.every(function (d) {\n        return d.test(x);\n      }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ? function (typeRep) {\n        return funcPath([name], typeRep) || implPath([/function (\\w*)/.exec(typeRep)[1], name]);\n      } : function (x) {\n        var isPrototype = x != null && x.constructor != null && x.constructor.prototype === x;\n        var m = null;\n        if (!isPrototype) m = funcPath([name], x);\n        if (m == null) m = implPath([type(x), 'prototype', name]);\n        return m && m.bind(x);\n      };\n    }\n\n    var name = 'sanctuary-type-classes/' + _name;\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(name, dependencies, function (x) {\n      return keys.every(function (_name) {\n        var arg = requirements[_name] === Constructor ? x.constructor : x;\n        return getBoundMethod(_name)(arg) != null;\n      });\n    });\n\n    typeClass.methods = keys.reduce(function (methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], { equals: Value });\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], { concat: Value });\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], { empty: Constructor });\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], { map: Value });\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], { bimap: Value });\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], { promap: Value });\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test({})\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], { ap: Value });\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], { of: Constructor });\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], { chain: Value });\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], { chainRec: Constructor });\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], { alt: Value });\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], { zero: Constructor });\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], { reduce: Value });\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test({})\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], { traverse: Value });\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], { extend: Value });\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], { extract: Value });\n\n  //  Null$prototype$toString :: Null ~> () -> String\n  function Null$prototype$toString() {\n    return 'null';\n  }\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$toString :: Undefined ~> () -> String\n  function Undefined$prototype$toString() {\n    return 'undefined';\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$toString :: Boolean ~> () -> String\n  function Boolean$prototype$toString() {\n    return _typeof(this) === 'object' ? 'new Boolean(' + toString(this.valueOf()) + ')' : this.toString();\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return (typeof other === 'undefined' ? 'undefined' : _typeof(other)) === _typeof(this) && other.valueOf() === this.valueOf();\n  }\n\n  //  Number$prototype$toString :: Number ~> () -> String\n  function Number$prototype$toString() {\n    return _typeof(this) === 'object' ? 'new Number(' + toString(this.valueOf()) + ')' : 1 / this === -Infinity ? '-0' : this.toString(10);\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return (typeof other === 'undefined' ? 'undefined' : _typeof(other)) === 'object' ? _typeof(this) === 'object' && equals(this.valueOf(), other.valueOf()) : isNaN(other) && isNaN(this) || other === this && 1 / other === 1 / this;\n  }\n\n  //  Date$prototype$toString :: Date ~> () -> String\n  function Date$prototype$toString() {\n    var x = isNaN(this.valueOf()) ? NaN : this.toISOString();\n    return 'new Date(' + toString(x) + ')';\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source && other.global === this.global && other.ignoreCase === this.ignoreCase && other.multiline === this.multiline && other.sticky === this.sticky && other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$toString :: String ~> () -> String\n  function String$prototype$toString() {\n    return _typeof(this) === 'object' ? 'new String(' + toString(this.valueOf()) + ')' : '\"' + this.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b') // \\b matches word boundary;\n    .replace(/\\f/g, '\\\\f') // [\\b] matches backspace\n    .replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0').replace(/\"/g, '\\\\\"') + '\"';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return (typeof other === 'undefined' ? 'undefined' : _typeof(other)) === _typeof(this) && other.valueOf() === this.valueOf();\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var $todo = [x];\n    var $done = [];\n    while ($todo.length > 0) {\n      var xs = f(iterationNext, iterationDone, $todo.shift());\n      var $more = [];\n      for (var idx = 0; idx < xs.length; idx += 1) {\n        (xs[idx].done ? $done : $more).push(xs[idx].value);\n      }\n      Array.prototype.unshift.apply($todo, $more);\n    }\n    return $done;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$toString :: Array a ~> () -> String\n  function Array$prototype$toString() {\n    var reprs = this.map(toString);\n    var keys = Object.keys(this).sort();\n    for (var idx = 0; idx < keys.length; idx += 1) {\n      var k = keys[idx];\n      if (!/^\\d+$/.test(k)) {\n        reprs.push(toString(k) + ': ' + toString(this[k]));\n      }\n    }\n    return '[' + reprs.join(', ') + ']';\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function (x) {\n      return f(x);\n    });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    this.forEach(function (x) {\n      Array.prototype.push.apply(result, f(x));\n    });\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    return this.reduce(function (acc, x) {\n      return f(acc, x);\n    }, initial);\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0:\n          return of(typeRep, []);\n        case 2:\n          return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ? lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) : go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return [f(this)];\n  }\n\n  //  Arguments$prototype$toString :: Arguments ~> String\n  function Arguments$prototype$toString() {\n    var args = Array.prototype.map.call(this, toString).join(', ');\n    return '(function () { return arguments; }(' + args + '))';\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Error$prototype$toString :: Error ~> () -> String\n  function Error$prototype$toString() {\n    return 'new ' + this.name + '(' + toString(this.message) + ')';\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) && equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$toString :: StrMap a ~> () -> String\n  function Object$prototype$toString() {\n    var reprs = [];\n    var keys = Object.keys(this).sort();\n    for (var idx = 0; idx < keys.length; idx += 1) {\n      var k = keys[idx];\n      reprs.push(toString(k) + ': ' + toString(this[k]));\n    }\n    return '{' + reprs.join(', ') + '}';\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) && keys.every(function (k) {\n      return equals(self[k], other[k]);\n    });\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    for (var k in this) {\n      result[k] = this[k];\n    }for (k in other) {\n      result[k] = other[k];\n    }return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    for (var k in this) {\n      result[k] = f(this[k]);\n    }return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var result = initial;\n    for (var k in this) {\n      result = f(result, this[k]);\n    }return result;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function (_) {\n      return x;\n    };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function (a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function (x) {\n      return f(functor(x));\n    };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function (x) {\n      return g(profunctor(f(x)));\n    };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function (x) {\n      return f(x)(apply(x));\n    };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function (x) {\n      return f(chain(x))(x);\n    };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      prototype: {\n        toString: Null$prototype$toString,\n        'fantasy-land/equals': Null$prototype$equals\n      }\n    },\n    Undefined: {\n      prototype: {\n        toString: Undefined$prototype$toString,\n        'fantasy-land/equals': Undefined$prototype$equals\n      }\n    },\n    Boolean: {\n      prototype: {\n        toString: Boolean$prototype$toString,\n        'fantasy-land/equals': Boolean$prototype$equals\n      }\n    },\n    Number: {\n      prototype: {\n        toString: Number$prototype$toString,\n        'fantasy-land/equals': Number$prototype$equals\n      }\n    },\n    Date: {\n      prototype: {\n        toString: Date$prototype$toString,\n        'fantasy-land/equals': Date$prototype$equals\n      }\n    },\n    RegExp: {\n      prototype: {\n        'fantasy-land/equals': RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty': String$empty,\n      prototype: {\n        toString: String$prototype$toString,\n        'fantasy-land/equals': String$prototype$equals,\n        'fantasy-land/concat': String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty': Array$empty,\n      'fantasy-land/of': Array$of,\n      'fantasy-land/chainRec': Array$chainRec,\n      'fantasy-land/zero': Array$zero,\n      prototype: {\n        toString: Array$prototype$toString,\n        'fantasy-land/equals': Array$prototype$equals,\n        'fantasy-land/concat': Array$prototype$concat,\n        'fantasy-land/map': Array$prototype$map,\n        'fantasy-land/ap': Array$prototype$ap,\n        'fantasy-land/chain': Array$prototype$chain,\n        'fantasy-land/alt': Array$prototype$alt,\n        'fantasy-land/reduce': Array$prototype$reduce,\n        'fantasy-land/traverse': Array$prototype$traverse,\n        'fantasy-land/extend': Array$prototype$extend\n      }\n    },\n    Arguments: {\n      prototype: {\n        toString: Arguments$prototype$toString,\n        'fantasy-land/equals': Arguments$prototype$equals\n      }\n    },\n    Error: {\n      prototype: {\n        toString: Error$prototype$toString,\n        'fantasy-land/equals': Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty': Object$empty,\n      'fantasy-land/zero': Object$zero,\n      prototype: {\n        toString: Object$prototype$toString,\n        'fantasy-land/equals': Object$prototype$equals,\n        'fantasy-land/concat': Object$prototype$concat,\n        'fantasy-land/map': Object$prototype$map,\n        'fantasy-land/alt': Object$prototype$alt,\n        'fantasy-land/reduce': Object$prototype$reduce\n      }\n    },\n    Function: {\n      'fantasy-land/of': Function$of,\n      'fantasy-land/chainRec': Function$chainRec,\n      prototype: {\n        'fantasy-land/equals': Function$prototype$equals,\n        'fantasy-land/map': Function$prototype$map,\n        'fantasy-land/promap': Function$prototype$promap,\n        'fantasy-land/ap': Function$prototype$ap,\n        'fantasy-land/chain': Function$prototype$chain\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# toString :: a -> String\n  //.\n  //. Returns a useful string representation of its argument.\n  //.\n  //. Dispatches to the argument's `toString` method if appropriate.\n  //.\n  //. Where practical, `equals(eval(toString(x)), x) = true`.\n  //.\n  //. `toString` implementations are provided for the following built-in types:\n  //. Null, Undefined, Boolean, Number, Date, String, Array, Arguments, Error,\n  //. and Object.\n  //.\n  //. ```javascript\n  //. > toString(-0)\n  //. '-0'\n  //.\n  //. > toString(['foo', 'bar', 'baz'])\n  //. '[\"foo\", \"bar\", \"baz\"]'\n  //.\n  //. > toString({x: 1, y: 2, z: 3})\n  //. '{\"x\": 1, \"y\": 2, \"z\": 3}'\n  //.\n  //. > toString(Cons(1, Cons(2, Cons(3, Nil))))\n  //. 'Cons(1, Cons(2, Cons(3, Nil)))'\n  //. ```\n  var toString = function () {\n    //  $seen :: Array Any\n    var $seen = [];\n\n    function call(method, x) {\n      $seen.push(x);\n      try {\n        return method.call(x);\n      } finally {\n        $seen.pop();\n      }\n    }\n\n    return function toString(x) {\n      if ($seen.indexOf(x) >= 0) return '<Circular>';\n\n      var xType = type(x);\n      if (xType === 'Object') {\n        var result;\n        try {\n          result = call(x.toString, x);\n        } catch (err) {}\n        if (result != null && result !== '[object Object]') return result;\n      }\n\n      return call(implPath([xType, 'prototype', 'toString']) || x.toString, x);\n    };\n  }();\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. false\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = function () {\n    //  $pairs :: Array (Pair Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (type(x) !== type(y)) {\n        return false;\n      }\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function (p) {\n        return p[0] === x && p[1] === y;\n      })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }();\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# filter :: (Applicative f, Foldable f, Monoid (f a)) => (a -> Boolean, f a) -> f a\n  //.\n  //. Filters its second argument in accordance with the given predicate.\n  //.\n  //. This function is derived from [`empty`](#empty), [`of`](#of), and\n  //. [`reduce`](#reduce).\n  //.\n  //. See also [`filterM`](#filterM).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //. ```\n  function filter(pred, m) {\n    var M = m.constructor;\n    return reduce(function (m, x) {\n      return pred(x) ? concat(m, of(M, x)) : m;\n    }, empty(M), m);\n  }\n\n  //# filterM :: (Monad m, Monoid (m a)) => (a -> Boolean, m a) -> m a\n  //.\n  //. Filters its second argument in accordance with the given predicate.\n  //.\n  //. This function is derived from [`empty`](#empty), [`of`](#of), and\n  //. [`chain`](#chain).\n  //.\n  //. See also [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > filterM(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filterM(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //. ```\n  function filterM(pred, m) {\n    var M = m.constructor;\n    var e = empty(M);\n    return chain(function (x) {\n      return pred(x) ? of(M, x) : e;\n    }, m);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(x => [x], Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > extend(xs => xs.length, ['foo', 'bar', 'baz', 'quux'])\n  //. [4]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    toString: toString,\n    equals: equals,\n    concat: concat,\n    empty: empty,\n    map: map,\n    bimap: bimap,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    filter: filter,\n    filterM: filterM,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    extract: extract\n  };\n});\n\n//. [Alt]:                      https://github.com/fantasyland/fantasy-land#alt\n//. [Alternative]:              https://github.com/fantasyland/fantasy-land#alternative\n//. [Applicative]:              https://github.com/fantasyland/fantasy-land#applicative\n//. [Apply]:                    https://github.com/fantasyland/fantasy-land#apply\n//. [Bifunctor]:                https://github.com/fantasyland/fantasy-land#bifunctor\n//. [Chain]:                    https://github.com/fantasyland/fantasy-land#chain\n//. [ChainRec]:                 https://github.com/fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  https://github.com/fantasyland/fantasy-land#comonad\n//. [Extend]:                   https://github.com/fantasyland/fantasy-land#extend\n//. [FL]:                       https://github.com/fantasyland/fantasy-land\n//. [Foldable]:                 https://github.com/fantasyland/fantasy-land#foldable\n//. [Functor]:                  https://github.com/fantasyland/fantasy-land#functor\n//. [Monad]:                    https://github.com/fantasyland/fantasy-land#monad\n//. [Monoid]:                   https://github.com/fantasyland/fantasy-land#monoid\n//. [Plus]:                     https://github.com/fantasyland/fantasy-land#plus\n//. [Profunctor]:               https://github.com/fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                https://github.com/fantasyland/fantasy-land#semigroup\n//. [Setoid]:                   https://github.com/fantasyland/fantasy-land#setoid\n//. [Traversable]:              https://github.com/fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       https://github.com/fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        https://github.com/fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     https://github.com/fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     https://github.com/fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  https://github.com/fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/concat`]:    https://github.com/fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/empty`]:     https://github.com/fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    https://github.com/fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    https://github.com/fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   https://github.com/fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/map`]:       https://github.com/fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        https://github.com/fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    https://github.com/fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    https://github.com/fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  https://github.com/fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      https://github.com/fantasyland/fantasy-land#zero-method\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n\n},{\"sanctuary-type-identifiers\":4}],4:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function (f) {\n\n  'use strict';\n\n  if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && _typeof(module.exports) === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n})(function () {\n\n  'use strict';\n\n  //  $$type :: String\n\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null && x.constructor != null && x.constructor.prototype !== x && typeof x.constructor[$$type] === 'string' ? x.constructor[$$type] : Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n});\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\nvar _require = require('daggy'),\n    taggedSum = _require.taggedSum;\n\nvar _require2 = require('fantasy-land'),\n    of = _require2.of,\n    map = _require2.map,\n    ap = _require2.ap,\n    chain = _require2.chain;\n\nvar Validation = taggedSum('Validation', {\n  Failure: ['errors'],\n  Success: ['x']\n});\n\nvar _Success = Validation.Success,\n    _Failure = Validation.Failure;\n\n\nValidation.prototype.fold = function (f) {\n  return this.cata({\n    Success: function Success(value) {\n      return f(value);\n    },\n    Failure: function Failure(x) {\n      return x;\n    }\n  });\n};\n\nValidation.prototype.map = Validation.prototype[map] = function (f) {\n  return this.cata({\n    Success: function Success(value) {\n      return _Success(f(value));\n    },\n    Failure: function Failure(errors) {\n      return _Failure(errors);\n    }\n  });\n};\n\nValidation.of = Validation[of] = function (x) {\n  return _Success(x);\n};\nValidation.fail = function (err) {\n  return _Failure(err);\n};\n\nValidation.prototype.ap = Validation.prototype[ap] = function (f) {\n  var _this = this;\n\n  return this.cata({\n    Success: function Success(fn) {\n      return f.cata({\n        Success: function Success(x) {\n          return _Success(fn(x));\n        },\n        Failure: function Failure() {\n          return f;\n        }\n      });\n    },\n    Failure: function Failure(errors) {\n      return f.cata({\n        Success: function Success() {\n          return _this;\n        },\n        Failure: function Failure(otherErrors) {\n          return _Failure(errors.concat(otherErrors));\n        }\n      });\n    }\n  });\n};\n\nValidation.prototype.chain = Validation.prototype[chain] = function (f) {\n  var _this2 = this;\n\n  return this.cata({\n    Success: function Success(value) {\n      return f(value);\n    },\n    Failure: function Failure() {\n      return _this2;\n    }\n  });\n};\n\nValidation.prototype.isSuccess = function () {\n  return this.cata({\n    Success: function Success() {\n      return true;\n    },\n    Failure: function Failure() {\n      return false;\n    }\n  });\n};\n\nmodule.exports = {\n  Validation: Validation,\n  Success: _Success,\n  Failure: _Failure\n};\n\n},{\"daggy\":1,\"fantasy-land\":2}]},{},[5])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}